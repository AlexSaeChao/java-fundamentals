/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.HashSet;
import java.util.Random;
import java.util.Arrays;
public class Library {

    public static int numOfSides = 6;
    private static Random random = new Random();

    public static int[] roll(int n) {
        int[] rolls = new int[n];

        for (int i = 0; i < n; i++) {
            rolls[i] = random.nextInt(numOfSides) + 1;
        }
        return rolls;
    }

    public static boolean containsDuplicates(int[] array) {
        Arrays.sort(array);

        for (int i = 0; i < array.length - 1; i++) {
            if (array[i] == array[i + 1]) {
                return true;
            }
        }

        return false;
    }

    public static double calculateAverage(int[] array) {

        int sum = 0;
        for (int num : array) {
            sum += num;
        }

        return (double) sum / array.length;
    }

    public int[] lowestAverage(int[][] arrays) {
        int minIndex = 0;
        double minAverage = Double.MAX_VALUE;
        for (int i = 0; i < arrays.length; i++) {
            double average = calculateAverage(arrays[i]);
            if (average < minAverage) {
                minIndex = i;
                minAverage = average;
            }
        }
        return arrays[minIndex];
    }

    public static String analyzeWeatherData(int[][] weeklyMonthTemperatures) {
        int minTemp = Integer.MAX_VALUE;
        int maxTemp = Integer.MIN_VALUE;
        HashSet<Integer> uniTemperatures = new HashSet<>();

        // Iterate through the data to find min and max temperatures
        for (int[] weekTemperatures : weeklyMonthTemperatures) {
            for (int temperature : weekTemperatures) {
                uniTemperatures.add(temperature);
                minTemp = Math.min(minTemp, temperature);
                maxTemp = Math.max(maxTemp, temperature);
            }
        }

        String missingTemperatures = "";


        for (int temperature = minTemp; temperature <= maxTemp; temperature++) {
            boolean foundTemperature = false;
            outerLoop:
            for (int[] weekTemperatures : weeklyMonthTemperatures) {
                for (int temp : weekTemperatures) {
                    if (temp == temperature) {
                        foundTemperature = true;
                        break outerLoop;
                    }
                }
            }
            if (!foundTemperature) {
                missingTemperatures += "Never saw temperature: " + temperature + "\n";
            }
        }

        // Construct the result string
        String result = "High: " + maxTemp + "\n";
        result += "Low: " + minTemp + "\n";
        result += missingTemperatures;

        return result;
    }

}
